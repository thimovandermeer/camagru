{"version":3,"file":"ktor-ktor-serialization-js-legacy.js","sources":["../../../../../ktor-utils/js/src/io/ktor/util/reflect/TypeInfoJs.kt","../../../../../ktor-utils/common/src/io/ktor/util/reflect/Type.kt","../../../../../ktor-shared/ktor-serialization/common/src/ContentConvertException.kt","../../../../../ktor-shared/ktor-serialization/common/src/ContentConverter.kt","../../../../../ktor-shared/ktor-serialization/common/src/WebsocketContentConverter.kt"],"sourcesContent":["/*\n * Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\npackage io.ktor.util.reflect\n\nimport kotlin.reflect.*\n\npublic actual interface Type\n\npublic object JsType : Type\n\n@OptIn(ExperimentalStdlibApi::class)\npublic actual inline fun <reified T> typeInfo(): TypeInfo = typeInfoImpl(JsType, T::class, tryGetType<T>())\n\npublic fun typeInfoImpl(reifiedType: Type, kClass: KClass<*>, kType: KType?): TypeInfo =\n    TypeInfo(kClass, reifiedType, kType)\n\n/**\n * Check [this] is instance of [type].\n */\npublic actual fun Any.instanceOf(type: KClass<*>): Boolean = type.isInstance(this)\n\npublic actual val KType.platformType: Type\n    get() = JsType\n","/*\n * Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\npackage io.ktor.util.reflect\n\nimport kotlin.reflect.*\n\n/**\n * Information about type.\n */\npublic expect interface Type\n\npublic expect val KType.platformType: Type\n\n/**\n * Ktor type information.\n * @property type: source KClass<*>\n * @property reifiedType: type with substituted generics\n * @property kotlinType: kotlin reified type with all generic type parameters.\n */\npublic data class TypeInfo(\n    public val type: KClass<*>,\n    public val reifiedType: Type,\n    public val kotlinType: KType? = null\n)\n\n/**\n * Returns [TypeInfo] for the specified type [T]\n */\npublic expect inline fun <reified T> typeInfo(): TypeInfo\n\n/**\n * Check [this] is instance of [type].\n */\npublic expect fun Any.instanceOf(type: KClass<*>): Boolean\n\n@PublishedApi\n@OptIn(ExperimentalStdlibApi::class)\ninternal inline fun <reified T> tryGetType(): KType? = try {\n    // We need to wrap getting type in try catch because of https://youtrack.jetbrains.com/issue/KT-42913\n    typeOf<T>()\n} catch (cause: Throwable) {\n    null\n}\n","/*\n * Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\npackage io.ktor.serialization\n\nimport io.ktor.websocket.*\n\npublic open class ContentConvertException(\n    message: String,\n    cause: Throwable? = null\n) : Exception(message, cause)\n\npublic class JsonConvertException(\n    message: String,\n    cause: Throwable? = null\n) : ContentConvertException(message, cause)\n\npublic open class WebsocketContentConvertException(\n    message: String,\n    cause: Throwable? = null\n) : ContentConvertException(message, cause)\n\npublic class WebsocketConverterNotFoundException(\n    message: String,\n    cause: Throwable? = null\n) : WebsocketContentConvertException(message, cause)\n\npublic class WebsocketDeserializeException(\n    message: String,\n    cause: Throwable? = null,\n    public val frame: Frame\n) : WebsocketContentConvertException(message, cause)\n","/*\n * Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\npackage io.ktor.serialization\n\nimport io.ktor.http.*\nimport io.ktor.http.content.*\nimport io.ktor.util.pipeline.*\nimport io.ktor.util.reflect.*\nimport io.ktor.utils.io.*\nimport io.ktor.utils.io.charsets.*\nimport io.ktor.utils.io.core.*\nimport kotlin.reflect.*\n\n/**\n * A custom content converter that could be registered in [ContentNegotiation] plugin for any particular content type\n * Could provide bi-directional conversion implementation.\n * One of the most typical examples of content converter is a JSON content converter that provides both\n * serialization and deserialization\n */\npublic interface ContentConverter {\n\n    /**\n     * Serializes a [value] to the specified [contentType] to a [OutgoingContent].\n     * This function could ignore value if it is not suitable for conversion and return `null` so in this case\n     * other registered converters could be tried or this function could be invoked with other content types\n     * it the converted has been registered multiple times with different content types\n     *\n     * @param charset response charset\n     * @param typeInfo response body typeInfo\n     * @param contentType to which this data converter has been registered and that matches the client's [Accept] header\n     * @param value to be converted\n     *\n     * @return a converted [OutgoingContent] value, or null if [value] isn't suitable for this converter\n     */\n    public suspend fun serialize(\n        contentType: ContentType,\n        charset: Charset,\n        typeInfo: TypeInfo,\n        value: Any\n    ): OutgoingContent?\n\n    /**\n     * Deserializes [content] to the value of type [typeInfo]\n     *\n     * @return a converted value (deserialized) or `null` if the context's subject is not suitable for this converter\n     */\n    public suspend fun deserialize(charset: Charset, typeInfo: TypeInfo, content: ByteReadChannel): Any?\n}\n\n/**\n * Detect suitable charset for an application call by `Accept` header or fallback to [defaultCharset]\n */\npublic fun Headers.suitableCharset(defaultCharset: Charset = Charsets.UTF_8): Charset =\n    suitableCharsetOrNull(defaultCharset) ?: defaultCharset\n\n/**\n * Detect suitable charset for an application call by `Accept` header or fallback to null\n */\npublic fun Headers.suitableCharsetOrNull(defaultCharset: Charset = Charsets.UTF_8): Charset? {\n    for ((charset, _) in parseAndSortHeader(get(HttpHeaders.AcceptCharset))) when {\n        charset == \"*\" -> return defaultCharset\n        Charset.isSupported(charset) -> return Charset.forName(charset)\n    }\n    return null\n}\n\n/**\n * Configuration for client and server `ContentNegotiation` plugin\n */\npublic interface Configuration {\n\n    public fun <T : ContentConverter> register(\n        contentType: ContentType,\n        converter: T,\n        configuration: T.() -> Unit = {}\n    )\n}\n","/*\n * Copyright 2014-2021 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\npackage io.ktor.serialization\n\nimport io.ktor.http.*\nimport io.ktor.http.content.*\nimport io.ktor.util.reflect.*\nimport io.ktor.utils.io.*\nimport io.ktor.utils.io.charsets.*\nimport io.ktor.websocket.*\n\n/**\n * A custom content converter that could be used in the [WebSockets] plugin\n * Could provide bi-directional conversion implementation.\n * One of the most typical examples of the content converter is a JSON converter that provides\n * both serialization and deserialization\n */\npublic interface WebsocketContentConverter {\n    /**\n     * Serializes a [value] to a WebSocket [Frame].\n     * This function could throw `WebsocketConverterNotFoundException` if the value is not suitable for conversion\n     *\n     * @param charset response charset\n     * @param typeInfo response body typeInfo\n     * @param value to be converted\n     *\n     * @return a converted [Frame] value, or null if [value] isn't suitable for this converter\n     */\n    public suspend fun serialize(\n        charset: Charset,\n        typeInfo: TypeInfo,\n        value: Any\n    ): Frame\n\n    /**\n     * Deserializes [content] to the value of type [typeInfo]\n     *\n     * @return a converted value (deserialized) or throws `WebsocketConverterNotFoundException` if the context's\n     * subject is not suitable for this converter\n     */\n    public suspend fun deserialize(charset: Charset, typeInfo: TypeInfo, content: Frame): Any\n\n    /**\n     * Checks if the content converter can deserialize a [frame]\n     *\n     * @param frame a WebSocket frame\n     *\n     * @return true if the content converter can deserialize a [frame] type or false if a type of [frame]\n     * is not supported by the converter\n     */\n    public fun isApplicable(frame: Frame): Boolean\n}\n\n/**\n * Serializes a [value] to a WebSocket [Frame].\n * This function could throw `WebsocketConverterNotFoundException` if the value is not suitable for conversion\n *\n * @param charset response charset\n * @param value to be converted\n *\n * @return a converted [OutgoingContent] value, or null if [value] isn't suitable for this converter\n */\npublic suspend inline fun <reified T> WebsocketContentConverter.serialize(\n    value: T,\n    charset: Charset = Charsets.UTF_8\n): Frame = serialize(charset, typeInfo<T>(), value as Any)\n\n/**\n * Deserializes [content] to the value of type [T]\n *\n * @return a converted value (deserialized) or throws `WebsocketConverterNotFoundException` if the context's\n * subject is not suitable for this converter\n */\npublic suspend inline fun <reified T> WebsocketContentConverter.deserialize(\n    content: Frame,\n    charset: Charset = Charsets.UTF_8\n): T = deserialize(charset, typeInfo<T>(), content) as T\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBAYA,sD;kBAAA,gB;qBAAA,2E;kBCyBA,K;;;;;;;;;;;EC7ByC,iD;IAErC,qB;MAAA,QAAoB,I;IACpB,qBAAU,OAAV,EAAmB,KAAnB,C;;G;;;;;;EAE6B,8C;IAE7B,qB;MAAA,QAAoB,I;IACpB,mCAAwB,OAAxB,EAAiC,KAAjC,C;;G;;;;;;EAE8C,0D;IAE9C,qB;MAAA,QAAoB,I;IACpB,mCAAwB,OAAxB,EAAiC,KAAjC,C;;G;;;;;;EAE4C,6D;IAE5C,qB;MAAA,QAAoB,I;IACpB,4CAAiC,OAAjC,EAA0C,KAA1C,C;;G;;;;;;EAEsC,8D;IAEtC,qB;MAAA,QAAoB,I;IAEpB,4CAAiC,OAAjC,EAA0C,KAA1C,C;IADA,kB;;G;;;;;;;;;;;;;ECoBJ,oD;IAGmC,8B;MAAA,iBAA0B,iBAAS,M;IAClE,Q;IAAA,gDAAsB,cAAtB,oBAAyC,c;G;EAE7C,0D;IAGyC,8B;MAAA,iBAA0B,iBAAS,M;IACnD,Q;IAAA,0BAAmB,sBAAI,gBAAY,cAAhB,CAAnB,Y;IAArB,OAAqB,cAArB,C;MAAqB,wB;MAAhB,IAAC,6B;MACF,oBAAW,GAAX,E;QAAkB,OAAO,c;WACzB,IAAA,iBAAQ,qBAAY,OAAZ,CAAR,C;QAAgC,OAAO,iBAAQ,iBAAQ,OAAR,C;;IAEnD,OAAO,I;EACX,C;;;EAUsC,kD;IAAC,W;EAAA,C;6CAHnC,mE;IAGI,6B;MAAA,gBAA8B,6B;IAHlC,iJ;G;;;;;;;;;;;;;EClBJ,sE;IAWI,uB;MAAA,UAAmB,iBAAS,M;IACF,U;IJtD2C,2B;;IAAkB,uB;;;QC0BpC,uD;;QAGrD,sC;UAHqD,sBAInD,I;UAJmD,sB;;UAAA,a;;;;IG4B5C,mCAAU,OAAV,EJtDiD,mDIsDjD,EAAkC,wDAAlC,e;G;oGAZX,yB;IAAA,yF;IAAA,sE;IAAA,gB;IAAA,8B;IJ3CA,sF;IAAA,gC;IAAA,gH;ICyBA,qB;IGkBA,oE;MAWI,uB;QAAA,UAAmB,iBAAS,M;MACF,IAAe,M;MJtD4B,2B;;MAAkB,uB;;;UC0BpC,uD;;UAGrD,sC;YAHqD,sBAInD,I;YAJmD,sB;;YAAA,a;;;;MG4B5C,+CAAU,OAAV,EJtDiD,mDIsDjD,EAAkC,wDAAlC,8B;MAAA,yD;K;GAZX,C;EAcA,gG;IAAA,wC;IAAA,yB;IAAA,sB;IAAA,sB;IAAA,kC;IAAA,8B;IAAA,8B;G;;;;;;;;6CAAA,Y;;;;;YAQI,kC;cAAA,qBAAmB,iBAAS,M;YACzB,U;YJjEkE,2B;;YAAkB,uB;;;gBC0BpC,kE;;gBAGrD,sC;kBAHqD,sBAInD,I;kBAJmD,sB;;kBAAA,a;;;;YGuChD,gB;4BAAA,yCAAY,kBAAZ,EJjEqD,mDIiErD,EAAoC,kBAApC,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,mE;;;;;;;;;;;;;;;G;EATP,iG;mBAAA,0F;QAAA,S;aAAA,Q;;aAAA,uB;G;sGAAA,yB;IAAA,yF;IAAA,sE;IAAA,8B;IJzDA,sF;IAAA,gC;IAAA,gH;ICyBA,qB;IGgCA,sE;MAQI,uB;QAAA,UAAmB,iBAAS,M;MACzB,U;MJjEkE,2B;;MAAkB,uB;;;UC0BpC,uD;;UAGrD,sC;YAHqD,sBAInD,I;YAJmD,sB;;YAAA,a;;;;MGuChD,iDAAY,OAAZ,EJjEqD,mDIiErD,EAAoC,OAApC,8B;MAAA,6F;K;GATP,C;;;;;;;;;;;;;;;;;;;"}